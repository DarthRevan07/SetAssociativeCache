$date
	Sun Nov 13 19:13:16 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module Main_tb $end
$var wire 32 ! writemiss [31:0] $end
$var wire 32 " writehit [31:0] $end
$var wire 32 # readmiss [31:0] $end
$var wire 32 $ readhit [31:0] $end
$scope module uut $end
$var reg 1 % hitmiss $end
$var reg 5 & hittag [4:0] $end
$var reg 12 ' memoryAddress [11:0] $end
$var reg 1 ( readEnable $end
$var reg 32 ) readhit [31:0] $end
$var reg 32 * readmiss [31:0] $end
$var reg 5 + tagNumber [4:0] $end
$var reg 7 , temp [6:0] $end
$var reg 32 - writeData [31:0] $end
$var reg 1 . writeEnable $end
$var reg 32 / writehit [31:0] $end
$var reg 32 0 writemiss [31:0] $end
$var integer 32 1 addressToMemory [31:0] $end
$var integer 32 2 blockNumberInMemory [31:0] $end
$var integer 32 3 data [31:0] $end
$var integer 32 4 empty [31:0] $end
$var integer 32 5 file [31:0] $end
$var integer 32 6 hitrate [31:0] $end
$var integer 32 7 missmaxcount [31:0] $end
$var integer 32 8 offset [31:0] $end
$var integer 32 9 set_number [31:0] $end
$var integer 32 : statusi [31:0] $end
$var integer 32 ; way_number [31:0] $end
$var integer 32 < way_number_temp [31:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 = i [31:0] $end
$scope begin $ivl_for_loop1 $end
$var integer 32 > j [31:0] $end
$scope begin $ivl_for_loop2 $end
$var integer 32 ? k [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop3 $end
$var integer 32 @ i [31:0] $end
$scope begin $ivl_for_loop4 $end
$var integer 32 A j [31:0] $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop5 $end
$var integer 32 B z [31:0] $end
$scope begin $ivl_for_loop10 $end
$var integer 32 C i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop11 $end
$var integer 32 D i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop6 $end
$var integer 32 E i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop7 $end
$var integer 32 F i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop8 $end
$var integer 32 G i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop9 $end
$var integer 32 H i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10000 H
b100 G
b100 F
b11111111111111111111111111111111 E
b100 D
b10000 C
b1111101000 B
b10000 A
b100000000 @
b10000 ?
b100 >
b1000 =
b1 <
b1 ;
b11111111111111111111111111111111 :
b111 9
b1010 8
b1000 7
b1000111 6
b10000000000000000000000000000011 5
b11111111111111111111111111111111 4
bx1010000110011110 3
b10011111 2
b10100010 1
b10001000 0
b1010110001 /
1.
bx1010000110011110 -
b1000111 ,
b10011 +
b10011000 *
b10111 )
0(
b100111111010 '
b10011 &
1%
b10111 $
b10011000 #
b1010110001 "
b10001000 !
$end
#10
